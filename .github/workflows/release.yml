on:
  push:
    tags:
      - '*'


name: Release

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    name: Test Suite
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  release:
    needs: [test, fmt, clippy]
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_artifact_files.outputs.upload_url }}
      release_id: ${{ steps.create_artifact_files.outputs.release_id }}
    steps:
      - uses: actions/checkout@v2
      - name: Create tag
        id: create_tag
        run: |
          tag=$(basename "${{ github.ref }}")
          echo "::set-output name=tag::$tag"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          release_name: ${{ steps.create_tag.outputs.tag }}
          draft: true
          prerelease: false
      - name: Create artifact files
        id: create_artifact_files
        run: |
          echo "::set-output name=release_id::${{ steps.create_release.outputs.id }}"
          echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"

  build-release:
    needs: [release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
#        os: [ ubuntu-latest, windows-latest, macos-latest ] need to fix windows build (cat / echo usage)
        os: [ ubuntu-latest, macos-11 ]
    name: Release
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - if: matrix.os == 'macos-11'
        run: |
          rustup target add aarch64-apple-darwin
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path) \
            MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version) \
            cargo build --release "--target=aarch64-apple-darwin"
          lipo -create \
            -output target/release/bw \
            target/aarch64-apple-darwin/release/bw \
            target/release/bw
      - name: Archive build result
        run: tar -czf bw-${{ matrix.os }}.tar.gz README.adoc -C target/release bw
      - name: Upload Built bw
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: bw-${{ matrix.os }}.tar.gz
          asset_name: bw-${{ matrix.os }}.tar.gz
          asset_content_type: application/gzip

  metadata:
    name: Publish Release
    needs: [release, build-release]
    runs-on: ubuntu-latest
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.release.outputs.release_id }}
      - uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 3
